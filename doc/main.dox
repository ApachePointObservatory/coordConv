/**
\mainpage coordConv: Astronomical Coordinate Conversions

\section coordConv_introduction Introduction

This package provides astronomical coordinate conversions to an accuracy of a small fraction of an arcsecond. It is intended to be suitable for controlling large research telescopes. As such, it can compute velocity as well as position.

Contents include:
* Coord: represents a position on the sky, with proper motion and radial velocity; provides easy access to spherical and cartesian position.
* Coordinate system objects, including ICRSCoordSys, FK5CoordSys, AppGeoCoordSys, AppTopoCoordSys and ObsCoordSys (refracted apparent topocentric).
* PVTCoord: a Coord with velocity along the arc of a great circle.
* Site: information about the observatory, current earth orientation data (using the IERS Earth Orientation bulletin if maximum accuracy is wanted) and refraction coefficients. The contents are required for conversions involving apparent coordinates and are ignored otherwise.
* PVT: an object representing a position, velocity and time.

To convert a position from one coordinate system to another:
* Construct a Site object.
* Construct the "from" Coord.
* Construct the "from" coordinate system (e.g. ICRSCoord).
* Construct the "to" coordinate system.
* toCoord = toCoordSys.convertFrom(fromCoordSys, fromCoord, site).

\section coordConv_conventions Conventions

* Spherical positions are in degrees (even right ascension). The first axis is the equatorial angle (e.g. right ascension or azimuth); the second axis is the polar angle (e.g. declination or altitude).
* Cartesian positions are in astronomical units.
* Proper motion is arcsec/century; the equatorial component is dEquatAng/dt, so it may be large near the pole.
* Radial velocity is km/sec, positive receding.
* All coordinate systems are right-handed, so azimuth os 0 south (which is unusual), 90 east.
* TAI is MJD, seconds (not days, which is unusual).

\section coordConv_requirements Requirements

The following packages are required, and all but slalib are available in the LSST software stack:
* slalib
* Eigen: C++ vector library
* ndarray: adds python support to Eigen. I use the LSST version, which also requires:
* boost
* daf_base: an LSST package
* sconsUtils: an LSST package that makes it easier to build packages using scons

The simplest way to build this package is:
* Install slalib.
* Install the minimal version of the current stable LSST software stack <https://dev.lsstcorp.org/trac/wiki/Installing>, which includes all dependencies other than slalib. As of 2014-05-01 coordConv is known to run with the Summer 2013 LSST software.
* Type the following commands:
    * cd <i>package_root</i>
    * setup -r .                                    # setup the package in eups
    * scons install version=<i>version</i> declare       # build the software, run unit tests and copy it into the LSST stack
    * eups declare coordConv <i>version</i> -t current   # declare the newly installed software current, so it will be setup default if no version is specified
*/